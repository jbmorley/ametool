#!/usr/bin/env python

import argparse
import codecs
import collections
import logging
import os
import pprint
import sys

import numpy
import simplejson as json

from PIL import Image

import io

verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


class Chdir(object):

    def __init__(self, path):
        self.path = path

    def __enter__(self):
        self._pwd = os.getcwd()
        os.chdir(self.path)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        os.chdir(self._pwd)


class GRNType(object):
    BYTE = 1
    SHORT = 2
    INTEGER = 3
    DOUBLE = 4
    LONG = 5
    SURFER_6_BINARY = 6
    SURFER_7_BINARY = 7
    COLOMBIA = 8


def read_metadata(reader):

    assert reader.read_string() == "MDVersion2"

    intensities = []
    for i in xrange(0, reader.read_int32()):
        intensity = {}
        intensity['Id'] = i
        intensity['Description'] = reader.read_string()
        intensity['Units'] = reader.read_string()
        intensities.append(intensity)

    metadata = {}
    metadata['Intensities'] = intensities
    metadata['Title'] = reader.read_string()
    metadata['CreationDateNew'] = reader.read_string()
    metadata['Version'] = reader.read_string()
    metadata['Abstract'] = reader.read_string()
    metadata['IndividualName'] = reader.read_string()
    metadata['Organization'] = reader.read_string()
    metadata['PositionName'] = reader.read_string()
    metadata['Phone'] = reader.read_string()
    metadata['Fax'] = reader.read_string()
    metadata['Address'] = reader.read_string()
    metadata['City'] = reader.read_string()
    metadata['AdministrativeArea'] = reader.read_string()
    metadata['ZipCode'] = reader.read_string()
    metadata['Country'] = reader.read_string()
    metadata['Email'] = reader.read_string()
    metadata['KeyWord'] = reader.read_string()
    metadata['AccessConstraints'] = reader.read_string()
    metadata['UseConstraints'] = reader.read_string()
    metadata['Language'] = reader.read_string()
    metadata['CharacterSet'] = reader.read_string()
    metadata['NorthBound'] = reader.read_double()
    metadata['SouthBound'] = reader.read_double()
    metadata['WestBound'] = reader.read_double()
    metadata['EastBound'] = reader.read_double()
    metadata['Url'] = reader.read_string()

    return metadata


def read_mod_grn_type(reader):

    version = reader.read_int8()
    variant = reader.read_chars(3)

    if variant == "SAA":
        return GRNType.SURFER_6_BINARY
    elif variant == "SBB":
        if version == 1:
            return GRNType.BYTE
        elif version == 2:
            return GRNType.SHORT
        elif version == 3:
            return GRNType.INTEGER
        elif version == 5:
            return GRNType.DOUBLE
        elif version == 6:
            return GRNType.LONG
        elif version == 68:
            return GRNType.SURFER_6_BINARY
    elif variant == "SRB":
        return GRNType.SURFER_7_BINARY
    elif variant == "COL":
        return GRNType.COLOMBIA

    raise AssertionError("Unsupported GRN type %s %d" % (variant, version, ))


def save_grid(identifier, grid):
    img = Image.fromarray(grid['data'])
    path = '%s.tiff' % (identifier, )
    img.save(path)
    output = dict(grid)
    del output['data']
    output['Path'] = path
    with open('%s.json' % (identifier, ), 'w') as fh:
        json.dump(output, fh, indent=4, ensure_ascii=False, encoding="utf-8")


def read_mod_grn(reader):

    grid = {}

    grn_type = read_mod_grn_type(reader)
    if (grn_type == GRNType.SURFER_6_BINARY or
        grn_type == GRNType.BYTE or
        grn_type == GRNType.SHORT or
        grn_type == GRNType.INTEGER or
        grn_type == GRNType.DOUBLE or
        grn_type == GRNType.LONG):

        # Surfer 6 Binary
        grid['Nx'] = reader.read_int16()
        grid['Ny'] = reader.read_int16()
        grid['XLow'] = reader.read_double()
        grid['XHigh'] = reader.read_double()
        grid['YLow'] = reader.read_double()
        grid['YHigh'] = reader.read_double()
        grid['ZLow'] = reader.read_double()
        grid['ZHigh'] = reader.read_double()

    elif grn_type == GRNType.SURFER_6_ASCII:
        raise AssertionError("Surfer 6 ASCII")
    elif grn_type == GRNType.SURFER_7_BINARY:
        raise AssertionError("Surfer 7 Binary")
    elif grn_type == GRNType.COLOMBIA:
        raise AssertionError("Colombia")
    else:
        raise AssertionError("Unsupported GRN type")

    read_method = None
    if (grn_type == GRNType.SURFER_6_BINARY):
        read_method = reader.read_single
    else:
        raise AssertionError("Unsupported GRN type %d" % (grn_type, ))

    data = numpy.ones((grid['Nx'], grid['Ny']), dtype=numpy.float)

    values = []
    for y in xrange(0, grid['Ny']):
        for x in xrange(0, grid['Nx']):
            value = read_method()
            data[x, y] = value
    grid['data'] = data

    del grid['Nx']
    del grid['Ny']

    return grid


def read_scenario_normal(reader, scenario_index, num_intensities, num_moments):

    scenario = {}
    scenario['Name'] = reader.read_string()
    scenario['Frequency'] = reader.read_double()
    scenario['Grid'] = []
    for intensity_index in xrange(0, num_intensities):
        current_moments = []
        for moment_index in xrange(0, num_moments):
            grid = read_mod_grn(reader)
            identifier = "scenario-%03d-intensity-%03d-moment-%03d" % (scenario_index, intensity_index, moment_index)
            save_grid(identifier, grid)
            current_moments.append("%s.json" % (identifier, ))
        scenario['Grid'].append(current_moments)
    
    return scenario


def read_ame_normal(reader):

    assert reader.read_string() == "ERN.HazardGrid.AMENormal"

    ame = {}
    ame['Metadata'] = read_metadata(reader)
    ame['VariableType'] = reader.read_int32()
    ame['HazardType'] = reader.read_int16()
    ame['RandomVariableType'] = reader.read_int32()
    ame['NumIntensities'] = reader.read_int32()
    ame['NumScenarios'] = reader.read_int32()
    ame['NumMoments'] = reader.read_int32()

    scenarios = []
    for scenario_index in xrange(0, ame['NumScenarios']):
        scenarios.append(read_scenario_normal(reader, scenario_index, ame['NumIntensities'], ame['NumMoments']))

    ame['Scenarios'] = scenarios

    return ame


def main():
    parser = argparse.ArgumentParser(description="Tool for manipulating AME files.")
    parser.add_argument("input", help="AME file")
    parser.add_argument("output", help="output directory")
    options = parser.parse_args()

    input = os.path.abspath(options.input)
    output = os.path.abspath(options.output)

    if not os.path.isdir(output):
        os.makedirs(output)

    logging.info("Checking %s...", input)
    with Chdir(output):
        ame = read_ame_normal(io.BinaryReader(path=input))
        with codecs.open('ame.json', 'w', 'utf-8') as fh:
            json.dump(ame, fh, indent=4, ensure_ascii=False, encoding="utf-8")


if __name__ == "__main__":
    main()
