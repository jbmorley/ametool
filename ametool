#!/usr/bin/env python

import argparse
import logging
import os
import struct
import sys


verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


class Reader(object):

    def __init__(self, path):
        self._path = path
        self.fh = open(self._path, mode='rb')

    def string(self, title=""):
        length = self.int()
        string = struct.unpack('%ds' % length, self.fh.read(length))[0]
        print "String(%d) -> %s\n%s\n" % (length, title, string)
        return string

    def int(self):
        integer = 0
        shift = 0
        while True:
            current = struct.unpack('B', self.fh.read(1))[0]
            integer |= ((current & 0x7F) << shift)
            if (current & 128 == 0):
                break
            shift += 7
        return integer

    def int32(self):
        return struct.unpack('i', self.fh.read(4))[0]


def main():
    parser = argparse.ArgumentParser(description="Tool for manipulating AME files.")
    parser.add_argument("file", help="AME file")
    options = parser.parse_args()

    amefile = os.path.abspath(options.file)
    logging.info(amefile)

    reader = Reader(path=amefile)

    # Class
    reader.string("Class")
    reader.string("MDVersion")
    print reader.int32()
    reader.string()
    reader.string()
    reader.string("Title")
    reader.string("CreationDateNew")
    reader.string("Version")
    reader.string("Abstract")
    reader.string("IndividualName")
    reader.string("Organization")
    reader.string("PositionName")
    reader.string("Phone")
    reader.string("Fax")
    reader.string("Address")
    reader.string("City")
    reader.string("Administrative Area")
    reader.string("Zip Code")
    reader.string("Country")
    reader.string("Email")
    reader.string("KeyWord")
    reader.string("AccessConstraints")
    reader.string("UseConstraints")

    exit()


if __name__ == "__main__":
    main()
