#!/usr/bin/env python

import argparse
import logging
import os
import struct
import sys


verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


class Reader(object):

    def __init__(self, path):
        self._path = path
        self.fh = open(self._path, mode='rb')

    def string(self, title=""):
        length = self.int()
        string = ""

        char = self.char()
        if char == '\x04':
            while True:
                char = self.char()
                if char == '\x00':
                    break
                string += char
        else:
            self.fh.seek(-1, 1)
            string = struct.unpack('%ds' % length, self.fh.read(length))[0]

        # Swallow any nulls.
        while True:
            value = struct.unpack('B', self.fh.read(1))[0]
            if value != 0:
                self.fh.seek(-1, 1)
                break

        print "String(%d) -> %s\n%r\n" % (length, title, string)
        return string

    def char(self):
        char = struct.unpack('c', self.fh.read(1))[0]
        # print "Char\t%r" % char
        return char

    def int(self):
        integer = struct.unpack('B', self.fh.read(1))[0]
        return integer


def main():
    parser = argparse.ArgumentParser(description="Tool for manipulating AME files.")
    parser.add_argument("file", help="AME file")
    options = parser.parse_args()

    amefile = os.path.abspath(options.file)
    logging.info(amefile)

    reader = Reader(path=amefile)

    # Class
    reader.string("Class")
    reader.string("MDVersion")
    reader.string()
    reader.string()
    reader.string()
    reader.string("Title")
    reader.string()
    reader.string() 
    reader.string()
    reader.string()
    reader.string()
    reader.string()
    reader.string()
    reader.string()
    reader.string()

    exit()


if __name__ == "__main__":
    main()
