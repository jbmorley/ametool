#!/usr/bin/env python

import argparse
import collections
import logging
import os
import pprint
import struct
import sys

verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


class BinaryReader(object):

    def __init__(self, path):
        self._path = path
        self.fh = open(self._path, mode='rb')

    def read_int(self):
        integer = 0
        shift = 0
        while True:
            current = struct.unpack('B', self.fh.read(1))[0]
            integer |= ((current & 0x7F) << shift)
            if (current & 128 == 0):
                break
            shift += 7
        return integer

    def read_int32(self):
        return struct.unpack('i', self.fh.read(4))[0]

    def read_double(self):
        return struct.unpack('d', self.fh.read(8))[0]

    def read_string(self, title=""):
        length = self.read_int()
        string = struct.unpack('%ds' % length, self.fh.read(length))[0]
        return string


def read_metadata(reader):

    assert reader.read_string() == "MDVersion2"

    intensities = []
    for i in xrange(0, reader.read_int32()):
        intensity = {}
        intensity['Id'] = i
        intensity['Description'] = reader.read_string()
        intensity['Units'] = reader.read_string()
        intensities.append(intensity)

    metadata = {}
    metadata['Intensities'] = intensities
    metadata['Title'] = reader.read_string()
    metadata['CreationDateNew'] = reader.read_string()
    metadata['Version'] = reader.read_string()
    metadata['Abstract'] = reader.read_string()
    metadata['IndividualName'] = reader.read_string()
    metadata['Organization'] = reader.read_string()
    metadata['PositionName'] = reader.read_string()
    metadata['Phone'] = reader.read_string()
    metadata['Fax'] = reader.read_string()
    metadata['Address'] = reader.read_string()
    metadata['City'] = reader.read_string()
    metadata['AdministrativeArea'] = reader.read_string()
    metadata['ZipCode'] = reader.read_string()
    metadata['Country'] = reader.read_string()
    metadata['Email'] = reader.read_string()
    metadata['KeyWord'] = reader.read_string()
    metadata['AccessConstraints'] = reader.read_string()
    metadata['UseConstraints'] = reader.read_string()
    metadata['Language'] = reader.read_string()
    metadata['CharacterSet'] = reader.read_string()
    metadata['NorthBound'] = reader.read_double()
    metadata['SouthBound'] = reader.read_double()
    metadata['WestBound'] = reader.read_double()
    metadata['EastBound'] = reader.read_double()
    metadata['Url'] = reader.read_string()
    return metadata


def read_ame(reader):

    reader.read_string("Class")
    metadata = read_metadata(reader)
    return metadata


def main():
    parser = argparse.ArgumentParser(description="Tool for manipulating AME files.")
    parser.add_argument("file", help="AME file")
    options = parser.parse_args()

    amefile = os.path.abspath(options.file)
    logging.info(amefile)

    ame = read_ame(BinaryReader(path=amefile))
    pprint.pprint(ame, indent=2)


if __name__ == "__main__":
    main()
