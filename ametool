#!/usr/bin/env python

import argparse
import logging
import os
import struct
import sys


verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


class Reader(object):

    def __init__(self, path):
        self._path = path
        with open(self._path, mode='rb') as fh:
            self._contents = fh.read()
            self._offset = 0

    def string(self):
        length = ord(self.char())
        string = ""
        for i in xrange(0, length):
            string += struct.unpack('s', self._contents[self._offset + i])[0]
        self._offset += length
        return string

    def char(self):
        char = struct.unpack('c', self._contents[self._offset])[0]
        self._offset += 1
        return char


def main():
    parser = argparse.ArgumentParser(description="Tool for manipulating AME files.")
    parser.add_argument("file", help="AME file")
    options = parser.parse_args()

    amefile = os.path.abspath(options.file)
    logging.info(amefile)

    reader = Reader(path=amefile)
    logging.info("class = %s" % reader.string())
    logging.info("metadata = %s" % reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())
    logging.info(reader.string())




if __name__ == "__main__":
    main()
