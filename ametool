#!/usr/bin/env python

import argparse
import collections
import logging
import os
import pprint
import sys

import io

verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


def read_metadata(reader):

    assert reader.read_string() == "MDVersion2"

    intensities = []
    for i in xrange(0, reader.read_int32()):
        intensity = {}
        intensity['Id'] = i
        intensity['Description'] = reader.read_string()
        intensity['Units'] = reader.read_string()
        intensities.append(intensity)

    metadata = {}
    metadata['Intensities'] = intensities
    metadata['Title'] = reader.read_string()
    metadata['CreationDateNew'] = reader.read_string()
    metadata['Version'] = reader.read_string()
    metadata['Abstract'] = reader.read_string()
    metadata['IndividualName'] = reader.read_string()
    metadata['Organization'] = reader.read_string()
    metadata['PositionName'] = reader.read_string()
    metadata['Phone'] = reader.read_string()
    metadata['Fax'] = reader.read_string()
    metadata['Address'] = reader.read_string()
    metadata['City'] = reader.read_string()
    metadata['AdministrativeArea'] = reader.read_string()
    metadata['ZipCode'] = reader.read_string()
    metadata['Country'] = reader.read_string()
    metadata['Email'] = reader.read_string()
    metadata['KeyWord'] = reader.read_string()
    metadata['AccessConstraints'] = reader.read_string()
    metadata['UseConstraints'] = reader.read_string()
    metadata['Language'] = reader.read_string()
    metadata['CharacterSet'] = reader.read_string()
    metadata['NorthBound'] = reader.read_double()
    metadata['SouthBound'] = reader.read_double()
    metadata['WestBound'] = reader.read_double()
    metadata['EastBound'] = reader.read_double()
    metadata['Url'] = reader.read_string()

    return metadata


def read_ame_normal(reader):

    assert reader.read_string() == "ERN.HazardGrid.AMENormal"

    ame = {}
    ame['Metadata'] = read_metadata(reader)
    ame['VariableType'] = reader.read_int32()
    ame['HazardType'] = reader.read_int16()
    ame['RandomVariableType'] = reader.read_int32()
    ame['NumIntensities'] = reader.read_int32()
    ame['NumScenarios'] = reader.read_int32()
    ame['NumMoments'] = reader.read_int32()

    # TODO: Read the scenarios.

    return ame


def main():
    parser = argparse.ArgumentParser(description="Tool for manipulating AME files.")
    parser.add_argument("file", help="AME file")
    options = parser.parse_args()

    amefile = os.path.abspath(options.file)
    logging.info(amefile)

    ame = read_ame_normal(io.BinaryReader(path=amefile))
    pprint.pprint(ame, indent=2)


if __name__ == "__main__":
    main()
